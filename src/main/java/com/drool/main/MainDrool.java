package com.drool.main;

import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;

import org.drools.definition.KnowledgePackage;
import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOUtil;
import org.jpos.iso.packager.GenericPackager;
import org.jpos.util.Logger;
import org.jpos.util.SimpleLogListener;
import org.kie.api.KieServices;
import org.kie.api.io.Resource;
import org.kie.api.io.ResourceType;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.kie.internal.KnowledgeBase;
//import org.drools.definition.KnowledgePackage;
import org.kie.internal.KnowledgeBaseFactory;
import org.kie.internal.builder.KnowledgeBuilder;
import org.kie.internal.builder.KnowledgeBuilderFactory;
import org.kie.internal.io.ResourceFactory;
import org.kie.internal.runtime.StatefulKnowledgeSession;

import com.drool.model.Address;
import com.drool.model.Employee;

public class MainDrool {
	private final static char[] hexArray = "0123456789ABCDEF".toCharArray();
public static void main(String args[]) {
	//String data = "16010200D400000000000000000000000000000000000100722464D128E09816104034567890123456010000000000004000012910554000003303096011084090100006C4F0F0F0F0F0F0F0F00B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E2084095E547F8774A24D420010101000000000122098000000000000000E8058000000002";
	//String data = "1601722464D128E098160000000000000000000000000100722464D128E09816104034567890123456010000000000004000012910554000003303096011084090100006C4F0F0F0F0F0F0F0F00B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E2084095E547F8774A24D420010101000000000122098000000000000000E8058000000002";
	//String data = "16010200 D4000000 00000000 00000000 00000000 00000100 722464D1 28E09816 10403456 78901234 56010000 00000000 40000129 10554000 00330309 60110840 90100006 C4F0F0F0 F0F0F0F0 F00B0123 45678901 20403456 78901234 56D03091 23123450 00F8F0F2 F9F1F0F0 F0F0F0F3 F3E3C5D9 D4C9C4F0 F1C3C1D9 C440C1C3 C3C5D7E3 D6D94040 C1C3D8E4 C9D9C5D9 40D5C1D4 C5404040 40404040 40404040 40C3C9E3 E840D5C1 D4C54040 4040E4E2 084095E5 47F8774A 24D42001 01010000 00000122 09800000 00000000 00E80580 00000002";
	//String data = "0200B2200000001000000000000000800000201234000000010000011072218012345606A5DFGR021ABCDEFGHIJ 1234567890";
	//String data = "0100722464D128E09816104034567890123456010000000000004000012910554000003303096011084090100006C4F0F0F0F0F0F0F0F00B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E2084095E547F8774A24D420010101000000000122098000000000000000E8058000000002";
//      String data = "0100722464D128E09816164034567890123456010000000000004000012910554000003303096011084090100006C4F0F0F0F0F0F0F0F00B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E2084095E547F8774A24D420010101000000000122098000000000000000E8058000000002";//String data = "0100722464D128E09816 10403456789012345601000000000000 40000129105540000033030960110840 90100006C4F0F0F0F0F0F0F0F00B0123 45678901204034567890123456D03091 2312345000F8F0F2F9F1F0F0F0F0F0F3 F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3 C3C5D7E3D6D94040C1C3D8E4C9D9C5D9 40D5C1D4C54040404040404040404040 40C3C9E3E840D5C1D4C540404040E4E2 084095E547F8774A24D4200101010000 00000122098000000000000000E80580 00000002";
//	 String data = "0200B2200000001000000000000000800000201234000000010000011072218012345606A5DFGR021ABCDEFGHIJ 1234567890";
	//String data = "01007224648128E0800010403456789012345601000000000000400001291055400000330309601108409010000B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E20840";
//	String data = "0200B2200000001000000000000000800000201234000000010000011072218012345606A5DFGR021ABCDEFGHIJ 1234567890";
	//String data = "01007224648128E0800010403456789012345601000000000000400001291055400000330309601108409010000B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E20840";
//	String data = "0800 202000000080 000000000000000132393131 30303031";
	//String data="0100432112344321123400000000000001230003040541330012050205539902200206305000014";
//	String data = "0800A0200000008000100400000000000000000000000001323931313030303100106A504F5320312E392E310301";
	
//	String data
//	String data = "0100722464D128E09816104034567890123456010000000000004000012910554000003303096011084090100006C4F0F0F0F0F0F0F0F00B012345678901204034567890123456D030912312345000F8F0F2F9F1F0F0F0F0F0F3F3E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E2084095E547F8774A24D420010101000000000122098000000000000000E8058000000002";
//	String data =  "0100FEFD648108E0E016000000000000000410403456789012345600000000000000560000000002500000000002500002140957446100000061000000000050152744021403090000597208400120080B012345678901F8F0F4F5F0F9F0F0F0F0F5F0E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E208400840084001000D00001000000000000000530000098100000002123456780E0040000000000000F1F140F1F2F3";
//	String data = "30323030723A80112CA1C0103136393031383030303032332020202020203331313030303030303030303030303030303131313531333237323932343233303431333237323931313135313131353131313543303030303030303030343131313133373130303030303030393535313732343744313030343030303030303030303030303030303131333139303030303334343432343233303430383038303336304D455243555259204252414E434820202020202020202020202020202020202020202020202020203031363130303030303030393535313732343733353630303030313632303131323031313230313132303131";
//	String data ="0200723A80112CA1C010169018000023311000000000000000111513272924230413272911151115C00000000041111371000000095517247D1004000000000000000113190000344424230408080360MERCURY BRANCH01610000000955172473560000162011201120112011";
//	String data="0100FEFD648108E0E016000000000000000416403456789012345600000000000000560000000002500000000002500002141053176100000061000000000052162317021403090000597208400120080B12345678901F8F0F4F5F1F0F0F0F0F0F5F2E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E208400840084001001234560D00001000000000000000530000098100000002123456780E0040000000000000F1F140F1F2F3";
//String data = "0200723A80112CA1C010169018000023      3110000000000000001115132729242304132729111511151115C00000000041111371000000095517247D1004000000000000000113190000344424230408080360MERCURY BRANCH                          01610000000955172473560000162011201120112011";
	//	System.out.println(bytesToHex(ISOUtil.asciiToEbcdic(data)));
////	System.out.println(ISOUtil.hexdump(data.getBytes()));
//	System.out.println(bytesToHex(ISOUtil.hex2byte(data)));
	
//	String data = "00100FEFD648108E0E016000000000000000416403456789012345600000000000000560000000002500000000002500002141053176100000061000000000052162317021403090000597208400120080B12345678901F8F0F4F5F1F0F0F0F0F0F5F2E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E208400840084001001234560D00001000000000000000530000098100000002123456780E0040000000000000F1F140F1F2F3";
	
	String data = "01007224649128E080161640345678901234560000000000000080000215090231000006030955420840902000C4F0F0F0F0F0F0F0F00B012345678901204034567890123456D030912312345000F8F0F4F6F0F9F0F0F0F0F0F6E3C5D9D4C9C4F0F1C3C1D9C440C1C3C3C5D7E3D6D94040C1C3D8E4C9D9C5D940D5C1D4C5404040404040404040404040C3C9E3E840D5C1D4C540404040E4E208400632000000000108000000000000001207C0000000020002";
	new MainDrool().parsingData(data);
	
//	try {
//	KieServices ks = KieServices.Factory.get();
//	KieContainer kContainer = ks.getKieClasspathContainer();
//	KieSession kSession = kContainer.newKieSession("drool-rule");
//	KieSession kSession = kContainer.newKieSession();
	
	
	
	
    // this will parse and compile in one step
    // read from file
//    kbuilder.add( ResourceFactory.newClassPathResource( "/hellodrools/testrules.drl",HelloDroolsNew.class),ResourceType.DRL );

    // read second rule from String
// KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
// Collection<org.kie.internal.definition.KnowledgePackage> pkgs;
// KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
// StatefulKnowledgeSession ksession;
//
//	   
//    String myRule =	"import com.drool.model.Employee;  rule \"name\"\n" + 
//	 		"when \n" + 
//	 		"Employee(name.length() > 10)\n" + 
//	 		"then \n" + 
//	 		"System.out.println(\"length of name is not appropriate it is exceeding the limit\");\n" + 
//	 		"end";
//    Resource myResource = ResourceFactory.newReaderResource((Reader) new StringReader(myRule));
//    kbuilder.add(myResource, ResourceType.DRL);
//
//    // Check the builder for errors
//    if ( kbuilder.hasErrors() ) {
//        System.out.println( kbuilder.getErrors().toString() );
//        throw new RuntimeException( "Unable to compile drl\"." );
//    }
//
//    // get the compiled packages (which are serializable)
//    pkgs = kbuilder.getKnowledgePackages();
//
//    // add the packages to a knowledgebase (deploy the knowledge packages).
//    kbase.addKnowledgePackages( pkgs );
//
//    ksession = kbase.newStatefulKnowledgeSession();
//    Employee emp = new Employee();
//	emp.setAge(11);
//	emp.setName("praveennn");
//	emp.setEmail("Praveenraturi3@yahoo.com");
//	emp.setSalary(10000);
//	Address address = new Address();
//	address.setHno(48);
//	address.setStreet("sailok");
//	address.setCity("dehradunfffffffffffdddddfffff");
//	address.setState("uttarakhand");
//	address.setPincode(248001);
//	ksession.insert(emp);
//	ksession.insert(address);
//    ksession.fireAllRules();
//    
    
    
    
	
	
	
//	 String rule = "import com.drool.model.Employee;  rule \"name\"\n" + 
//		 		"when \n" + 
//		 		"Employee(name.length() > 10)\n" + 
//		 		"then \n" + 
//		 		"System.out.println(\"length of name is not appropriate it is exceeding the limit\");\n" + 
//		 		"end";
//	 kSession.execute(rule);
//	kSession.insert(emp);
//	kSession.insert(address);
//	int num = kSession.fireAllRules();
//	kSession.dispose();
//	System.out.println("rules failed "+num);
//	}
//	catch(Exception e) {
//		e.printStackTrace();
//	}

}
public void parsingData(String data) {
	Logger logger = new Logger();
	try {
	
		System.out.println("DATAgfhgfgh : " + data);
		
		GenericPackager packager = new GenericPackager("basic1987_2.xml");
		ISOMsg isoMsg = new ISOMsg();
		isoMsg.setPackager(packager);
//		for (byte data1: data.getBytes()) {
//			System.out.format("%d"+data1);
//			System.out.println("");
//		}
		 logger.addListener(new SimpleLogListener());
         packager.setLogger(logger,"packager");
		isoMsg.unpack(data.getBytes());
		System.out.println(isoMsg);
		try {
			System.out.println("  MTI : " + isoMsg.getMTI());
			for (int i=1;i<=isoMsg.getMaxField();i++) {
				if (isoMsg.hasField(i)) {
					System.out.println("    Field-"+i+" : "+isoMsg.getString(i));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			System.out.println("--------------------");
		}
	} catch (Exception e) {
		// TODO Auto-generated catch block
		System.out.println(e);
	}
}
public static String bytesToHex(byte[] bytes) {
	char[] hexChars = new char[bytes.length * 2];
	for (int j = 0; j < bytes.length; j++) {
		int v = bytes[j] & 0xFF;
		hexChars[j * 2] = hexArray[v >>> 4];
		hexChars[j * 2 + 1] = hexArray[v & 0x0F];
	}
	return new String(hexChars);
}
}
